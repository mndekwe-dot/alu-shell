#!/usr/bin/env bash
# This script manages the process lifecycle (start, stop, restart) and also contains the daemon logic.

# --- Configuration ---
DAEMON_BASENAME="manage_my_process"
PID_FILE="/var/run/my_process.pid"
# Internal argument used to trigger the daemon loop
DAEMON_FLAG="--daemon-loop"

# ----------------------------------------------------
# A. DAEMON LOGIC (The actual work process)
# ----------------------------------------------------
daemon_loop () {
    # This function is the actual program being run in the background.
    while true
    do
        echo "I am alive!" >> /tmp/my_process
        sleep 2
    done
}

# ----------------------------------------------------
# B. MANAGER LOGIC (The init script functions)
# ----------------------------------------------------

start () {
    # Check if the process is already running (optional, but good practice)
    if [ -f "$PID_FILE" ] && kill -0 "$(cat "$PID_FILE")" 2>/dev/null; then
        echo "$DAEMON_BASENAME is already running."
        return 1
    fi
    
    # Execute THIS script again with the internal flag, running it in the background (&)
    # This starts the daemon_loop() function as a separate process.
    "$0" "$DAEMON_FLAG" &
    
    # Save the PID of the last background process ($!)
    echo $! > "$PID_FILE"
    
    echo "$DAEMON_BASENAME started"
}

stop () {
    if [ ! -f "$PID_FILE" ]; then
        echo "$DAEMON_BASENAME is not running (PID file missing)."
        return 1
    fi

    PID=$(cat "$PID_FILE")
    
    # Send SIGTERM to the process specified by the PID
    kill "$PID" 2>/dev/null
    
    # Wait for the process to truly terminate
    wait "$PID" 2>/dev/null
    
    # Delete the PID file
    rm -f "$PID_FILE"
    
    echo "$DAEMON_BASENAME stopped"
}

restart () {
    # Attempt to stop the process first (suppress output for clean restart)
    stop > /dev/null 2>&1

    # Start the process again
    "$0" "$DAEMON_FLAG" &
    
    # Save the new PID
    echo $! > "$PID_FILE"
    
    echo "$DAEMON_BASENAME restarted"
}

# ----------------------------------------------------
# C. EXECUTION FLOW
# ----------------------------------------------------

# Check if the script was called with the internal flag to run the daemon
if [ "$1" == "$DAEMON_FLAG" ]; then
    daemon_loop
    # The daemon loop will run indefinitely or until killed.
    exit $?
fi

# Otherwise, process the external arguments for management
case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart)
    restart
    ;;
  *)
    echo "Usage: $DAEMON_BASENAME {start|stop|restart}"
    ;;
esac
